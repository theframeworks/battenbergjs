"use strict";module.exports=init=function(){return{MarzipanoViewer:require("./MarzipanoViewer"),DekstopViewer:require("./DesktopViewer"),VRViewer:require("./VRViewer")}};
"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}var Marzipano=require("marzipano"),_require=require("./utils"),tiledImageSource=_require.tiledImageSource,MarzipanoViewer=function(){function a(e,t,n){_classCallCheck(this,a),this.panoElement=t,this.environment=this.prepareEnvironment(e),this.initialScene=0,this.rotationMaps=this.sceneTransitionRotationMapping(),this.Marzipano=Marzipano,this.screenfull=window.screenfull,this.sceneData=n,this.bowser=this.Marzipano.dependencies.bowser,this.mat4=this.Marzipano.dependencies.glMatrix.mat4,this.quat=this.Marzipano.dependencies.glMatrix.quat,this.believedDesktop=this.isBelievedDesktop(e);var i={controls:{mouseViewMode:this.sceneData.settings.mouseViewMode||!1,scrollZoom:!1}};this.viewer=new this.Marzipano.Viewer(this.panoElement,i),this.currentScene=null,this.defaultView=null,this.currentData={},this.currentContainers=[],this.currentLayers=[]}return _createClass(a,[{key:"setupSceneBehaviour",value:function(e,t){return this.scenes=this.createScenesFromData.call(this,this.sceneData.scenes,e,this.viewer),this.cacheSceneVariables(this.scenes[this.initialScene]),this.scenes}},{key:"deg2rad",value:function(e){return e*Math.PI/180}},{key:"rad2deg",value:function(e){return 180*e/Math.PI}},{key:"isBelievedDesktop",value:function(){return"mobileVR"!==this.environment}},{key:"createScenesFromData",value:function(e,d,l){var u=this;return e.map(function(e,t){var n=tiledImageSource(e.id),i=new u.Marzipano.CubeGeometry(u.sceneData.cubeGeometryLevels),a=d.call(u,l,n,i,e),s=a.scene,o=a.view,c=a.containers,r=a.layers;return{data:a.data,scene:s,containers:c,layers:r,view:o}})}},{key:"cacheSceneVariables",value:function(e){this.currentView=e.view,this.currentScene=e.scene,this.currentContainers=e.containers,this.currentData=e.data,this.currentLayers=e.layers}},{key:"sanitize",value:function(e){return e.replace("&","&amp;").replace("<","&lt;").replace(">","&gt;")}},{key:"createLinkHotspotElement",value:function(e,t){var n=this,i=document.createElement("div");i.classList.add("hotspot"),i.classList.add("link-hotspot");var a=document.createElement("img");a.src="icons/link.svg",a.classList.add("link-hotspot-icon"),i.addEventListener("click",function(){n.currentScene=t.call(n,n.findSceneById(e.target))}),this.stopTouchAndScrollEventPropagation(i);var s=document.createElement("div");s.classList.add("hotspot-tooltip"),s.classList.add("link-hotspot-tooltip"),i.appendChild(a),i.appendChild(s);var o=document.createElement("div");return o.appendChild(i),o}},{key:"createInfoHotspotElement",value:function(e){var t=document.createElement("div");t.setAttribute("data-info-hotspot-container-id",e.id);var n=document.createElement("div");n.classList.add("hotspot"),n.classList.add("info-hotspot");var i=document.createElement("div");i.classList.add("info-hotspot-header"),i.setAttribute("data-info-hotspot-id",e.id);var a=document.createElement("div");a.classList.add("info-hotspot-icon-wrapper"),i.appendChild(a);var s=document.createElement("div");s.classList.add("info-hotspot-content"),s.setAttribute("data-info-hotspot-id",e.id);var o=document.getElementById("hotspot-".concat(e.id));o&&s.appendChild(o.cloneNode(!0)),e.hideInMobile&&(n.classList.add("is-hidden-inline"),s.classList.add("is-hidden-inline")),n.appendChild(i),(this.believedDesktop?this.panoElement:n).appendChild(s);var c=function(e){var t=e.currentTarget.getAttribute("data-info-hotspot-id");e.preventDefault(),document.querySelectorAll('[data-info-hotspot-id="'.concat(t,'"]')).forEach(function(e){e.classList.toggle("is-visible"),e.classList.contains("is-visible")&&document.querySelectorAll('[data-info-hotspot-container-id="'.concat(t,'"]')).forEach(function(e){e.parentNode.appendChild(e)})})};n.querySelector(".info-hotspot-header").addEventListener("click",c);var r=s.querySelector("[data-hotspot-close]");return r&&(r.setAttribute("data-info-hotspot-id",e.id),r.addEventListener("click",c)),this.stopTouchAndScrollEventPropagation(n),t.appendChild(n),t}},{key:"stopTouchAndScrollEventPropagation",value:function(e){for(var t=["touchstart","touchmove","touchend","touchcancel","wheel","mousewheel"],n=0;n<t.length;n++)e.addEventListener(t[n],function(e){e.stopPropagation()})}},{key:"findSceneById",value:function(e){for(var t=0;t<this.scenes.length;t++)if(this.scenes[t].data.id===e)return this.scenes[t];return null}},{key:"findSceneDataById",value:function(e){for(var t=0;t<this.sceneData.scenes.length;t++)if(this.sceneData.scenes[t].id===e)return this.sceneData.scenes[t];return null}},{key:"prepareEnvironment",value:function(e){if(window.matchMedia){var t=function(){n.matches?(document.body.classList.remove("desktop"),document.body.classList.add("mobile")):(document.body.classList.remove("mobile"),document.body.classList.add("desktop"))},n=matchMedia("(max-width: 500px), (max-height: 500px)");t(),n.addListener(t)}else document.body.classList.add("desktop");return e}},{key:"getTransitionRotation",value:function(e,t){return this.rotationMaps.from[e.id].to[t.id]}},{key:"sceneTransitionRotationMapping",value:function(){return{from:{"scene-0":{to:{"scene-0":{yaw:3.8,pitch:.22798880022457624},"scene-1":{yaw:-2.8274448996260446,pitch:.06012930486655321}}},"scene-1":{to:{"scene-0":{yaw:.145253345801045,pitch:.07},"scene-2":{yaw:-.14971585481837835,pitch:.07},"scene-3":{yaw:2.6021574657373403,pitch:.09960663233749756}}},"scene-2":{to:{"scene-1":{yaw:2.432133517575684,pitch:.07}}},"scene-3":{to:{"scene-1":{yaw:-.4469404282362994,pitch:.07244311540308956},"scene-4":{yaw:-1.3994865291876781,pitch:.05190705801597417},"scene-5":{yaw:1.403211200196525,pitch:.07}}},"scene-4":{to:{"scene-3":{yaw:1.0620391999023013,pitch:.07}}},"scene-5":{to:{"scene-3":{yaw:-.5201367601720577,pitch:.11417302060570478}}}}}}}]),a}();
"use strict";function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var r=0;r<t.length;r++){var o=t[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function _createClass(e,t,r){return t&&_defineProperties(e.prototype,t),r&&_defineProperties(e,r),e}function _possibleConstructorReturn(e,t){return!t||"object"!==_typeof(t)&&"function"!=typeof t?_assertThisInitialized(e):t}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _get(e,t,r){return(_get="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,r){var o=_superPropBase(e,t);if(o){var n=Object.getOwnPropertyDescriptor(o,t);return n.get?n.get.call(r):n.value}})(e,t,r||e)}function _superPropBase(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=_getPrototypeOf(e)););return e}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_setPrototypeOf(e,t)}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var MarzipanoViewer=require("./MarzipanoViewer"),DesktopViewer=function(e){function u(e){var t;_classCallCheck(this,u),(t=_possibleConstructorReturn(this,_getPrototypeOf(u).call(this,"desktop",e,window.sceneDataDesktop))).autorotateData,t.firstLoad=!0,t.autorotateToggleElement=document.querySelector("#autorotateToggle"),t.sceneNameElement=document.querySelector("#titleBar .sceneName");var r=t.setupSceneBehaviour(t.createScene,t.switchScene);return t.switchScene(r[t.initialScene]),t}return _inherits(u,MarzipanoViewer),_createClass(u,[{key:"createScene",value:function(e,t,r,o){var n=this,i=this.Marzipano.RectilinearView.limit.traditional(this.sceneData.faceSize,this.deg2rad(100),this.deg2rad(120)),a=new this.Marzipano.RectilinearView(o.initialViewParameters,i),c=e.createScene({source:t,geometry:r,view:a,pinFirstLevel:!0}),s=c.hotspotContainer();return o.linkHotspots.forEach(function(e){var t=_get(_getPrototypeOf(u.prototype),"createLinkHotspotElement",n).call(n,e,n.switchScene);s.createHotspot(t,{yaw:e.yaw,pitch:e.pitch})}),o.infoHotspots.forEach(function(e){var t=_get(_getPrototypeOf(u.prototype),"createInfoHotspotElement",n).call(n,e,n.panoElement);s.createHotspot(t,{yaw:e.yaw,pitch:e.pitch})}),{scene:c,view:a,data:o}}},{key:"switchScene",value:function(e){var t=this.firstLoad?e.data.initialViewParameters:this.getTransitionRotation(this.currentData,e.data);this.firstLoad=!1,e.view.setParameters(t),this.cacheSceneVariables.call(this,e),e.scene.switchTo()}}]),u}();
"use strict";function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _toConsumableArray(t){return _arrayWithoutHoles(t)||_iterableToArray(t)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}function _iterableToArray(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}function _arrayWithoutHoles(t){if(Array.isArray(t)){for(var e=0,o=new Array(t.length);e<t.length;e++)o[e]=t[e];return o}}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var o=0;o<e.length;o++){var n=e[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,o){return e&&_defineProperties(t.prototype,e),o&&_defineProperties(t,o),t}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?_assertThisInitialized(t):e}function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _get(t,e,o){return(_get="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,o){var n=_superPropBase(t,e);if(n){var r=Object.getOwnPropertyDescriptor(n,e);return r.get?r.get.call(o):r.value}})(t,e,o||t)}function _superPropBase(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=_getPrototypeOf(t)););return t}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var MarzipanoViewer=require("./MarzipanoViewer"),DeviceOrientationStrategy=require("./DeviceOrientationStrategy"),VRViewer=function(t){function f(t){var e;_classCallCheck(this,f),(e=_possibleConstructorReturn(this,_getPrototypeOf(f).call(this,"mobileVR",t,window.sceneDataVR))).gyroEnabled,e.viewingTimeoutID=null,e.currentHotspotCandidate=null,e.openedHotspot=null,e.previousFrameRotation={yaw:0,pitch:0,roll:0},e.sceneEntryViewDirection=null,e.lookTriggerThreshold=1500,e.openPopupRadianThreshhold=e.deg2rad(5),e.closePopupHorizontalRadianThreshholdPerColumn=e.deg2rad(15),e.orientationMethodID="deviceOrientation",e.deviceOrientationControlFunction=DeviceOrientationStrategy,e.deviceOrientationController;var o=e.setupSceneBehaviour(e.createScene,e.switchScene);return e.setupGyroControls(o),e.switchScene(o[e.initialScene]),e}return _inherits(f,MarzipanoViewer),_createClass(f,[{key:"createScene",value:function(r,t,e,i){var a=this,s=r.stage(),l={source:t,geometry:e,textureStoreOpts:{previouslyVisibleCacheSize:32},layerOpts:{effects:null}},c=[],u=[],p=new this.Marzipano.RectilinearView(i.initialViewParameters),h=r.createEmptyScene({view:p});[{rect:{relativeWidth:.5,relativeX:0}},{rect:{relativeWidth:.5,relativeX:.5}}].forEach(function(t,e){l.layerOpts.effects=t;var o=h.createLayer(l);o.eyeSide=0===e?"left":"right";var n=new a.Marzipano.HotspotContainer(r.domElement(),s,p,r.renderLoop(),t);i.linkHotspots.forEach(function(t){var e=_get(_getPrototypeOf(f.prototype),"createLinkHotspotElement",a).call(a,t,a.switchScene);e.dataset.hotspot_target=t.target,n.createHotspot(e,{yaw:t.yaw,pitch:t.pitch})}),i.infoHotspots.forEach(function(t){if(!t.hideInVR){var e=_get(_getPrototypeOf(f.prototype),"createInfoHotspotElement",a).call(a,t,o);e.dataset.hotspot_target=t.id,n.createHotspot(e,{yaw:t.yaw,pitch:t.pitch})}}),n.hide(),c.push(n),u.push(o)}),"scene-0"===i.id&&this.showHotspotZero(c);var o=i.infoHotspots.filter(function(t){return!1===Object.keys(t).includes("hideInVR")}).filter(function(t){return"0"!==t.id}).map(function(t){return{yaw:t.yaw,pitch:t.pitch,target:t.id,columns:t.columns||1}}),n=i.linkHotspots.map(function(t){return{yaw:t.yaw,pitch:t.pitch,target:t.target}});return i.vrCollisionData=_toConsumableArray(o).concat(_toConsumableArray(n)),i.firstLoad=!0,{scene:h,view:p,containers:c,layers:u,data:i}}},{key:"showHotspotZero",value:function(t){var e=this.getHotspotsFromHotspotTarget(t,"0"),o=e.leftHotspot,n=(e.rightHotspot,o.domElement());this.clickInfoHotspot(n)}},{key:"switchScene",value:function(t){this.currentContainers.forEach(function(t){t.hide()}),t.containers.forEach(function(t){t.show()}),clearTimeout(this.viewingTimeoutID),this.viewingTimeoutID=null;var e=this.getTransitionRotation(this.currentData,t.data);t.view.setParameters(e),this.cacheSceneVariables.call(this,t),t.scene.switchTo({},function(){})}},{key:"setupGyroControls",value:function(t){var o=this;this.Marzipano.dependencies.eventEmitter(this.deviceOrientationControlFunction),this.deviceOrientationController=new this.deviceOrientationControlFunction;this.viewer.controls().registerMethod(this.orientationMethodID,this.deviceOrientationController,!0),this.deviceOrientationController.addEventListener("updatedYawPitchRoll",function(t,e){o.computeLookDirection.call(o,e,o.currentScene,o.currentView)})}},{key:"setTimerClass",value:function(t){this.panoElement.classList.toggle("is-opening",t)}},{key:"clickInfoHotspot",value:function(t){t.querySelector(".info-hotspot-header").click()}},{key:"clickLinkHotspot",value:function(t){t.querySelector(".link-hotspot").click()}},{key:"clampOverflowRotation",value:function(t){var e=2*Math.PI,o=(t+Math.PI)%e;return o<0&&(o+=e),o-Math.PI}},{key:"minimumLookAtBounds",value:function(t,e){var o=t.yaw-e.yaw,n=t.pitch-e.pitch;return{yawDiff:o,pitchDiff:n,lookAtUpperBound:o<this.openPopupRadianThreshhold&&n<this.openPopupRadianThreshhold,lookAtLowerBound:o>-this.openPopupRadianThreshhold&&n>-this.openPopupRadianThreshhold}}},{key:"minimumLookAwayBounds",value:function(t,e){var o=this.clampOverflowRotation(t.yaw-e.yaw);return{yawDiff:o,lookAwayMinimumUpperBound:o>this.closePopupHorizontalRadianThreshholdPerColumn*t.columns,lookAwayMinimumLowerBound:o<-this.closePopupHorizontalRadianThreshholdPerColumn*t.columns}}},{key:"computeLookDirection",value:function(t,e,o){var i=this,a=o.parameters();if(this.currentHotspotCandidate||this.openedHotspot){if(this.currentHotspotCandidate&&!this.openedHotspot){var n=this.currentHotspotCandidate,r=this.minimumLookAtBounds(n,a),s=(r.yawDiff,r.pitchDiff,r.lookAtUpperBound),l=r.lookAtLowerBound;if(!s||!l)return clearTimeout(this.viewingTimeoutID),this.viewingTimeoutID=null,this.openedHotspot=null,this.currentHotspotCandidate=null,void this.setTimerClass(!1)}else if(this.openedHotspot){var c=this.openedHotspot,u=this.minimumLookAwayBounds(c,a),p=(u.yawDiff,u.lookAwayMinimumUpperBound);if(u.lookAwayMinimumLowerBound||p){var h=this.getHotspotsFromHotspotTarget(this.currentContainers,c.target),f=h.leftHotspot,d=(h.rightHotspot,f.domElement());this.clickInfoHotspot(d),clearTimeout(this.viewingTimeoutID),this.viewingTimeoutID=null,this.openedHotspot=null}}}else for(var y=this.currentData.vrCollisionData,m=function(t){if(i.currentHotspotCandidate)return"continue";var n=y[t],e=i.minimumLookAtBounds(n,a),o=(e.yawDiff,e.pitchDiff,e.lookAtUpperBound),r=e.lookAtLowerBound;o&&r&&(i.currentHotspotCandidate=n,i.viewingTimeoutID||(i.setTimerClass(!0),i.viewingTimeoutID=setTimeout(function(){var t=i.getHotspotsFromHotspotTarget(i.currentContainers,i.currentHotspotCandidate.target),e=t.leftHotspot,o=(t.rightHotspot,e.domElement());i.setTimerClass(!1),i.viewingTimeoutID=null,o.dataset.hotspot_target.includes("scene")?(i.openedHotspot=null,i.clickLinkHotspot(o)):(i.openedHotspot=n,i.clickInfoHotspot(o))},i.lookTriggerThreshold)))},v=0;v<y.length;v++)m(v)}},{key:"getHotspotsFromHotspotTarget",value:function(t,e){for(var o=_toConsumableArray(t[0].listHotspots()),n=0;n<o.length;n++){if(o[n].domElement().dataset.hotspot_target==e)return{leftHotspot:o[n],rightHotspot:t[1].listHotspots()[n]}}console.error("no hotspot found?")}}]),f}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
